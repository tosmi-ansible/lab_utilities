- name: Check RHEL images exists
  ansible.builtin.stat:
    path: "{{ lab_host_image_src }}"
  register: rhel_qcow

- name: Fail if RHEL qcow image does not exist
  ansible.builtin.fail:
    msg: "please download requested image to {{ lab_host_image_src }}"
  when: not rhel_qcow.stat.exists

- name: Copy image to image file
  ansible.builtin.copy:
    src: "{{ lab_host_image_src }}"
    dest: "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2"
    remote_src: yes
    force: no

- name: Resize the root disk
  when:
    - item.disk.size_gb is defined
  block:

    - name: Query disk image with qemu-img
      ansible.builtin.command: qemu-img info --output json "{{ lab_host_image_src }}"
      register: _create_vm_qemu_img_info

    - name: Register current disk size
      set_fact:
        _create_vm_current_disk_size: "{{ (_create_vm_qemu_img_info.stdout | from_json)['virtual-size'] }}"
        _create_vm_desired_disk_size: "{{ item.disk.size_gb*1024*1024*1024 }}"

    - name: Display current and desired disk size
      ansible.builtin.debug:
        msg:
          - "Current size: {{ _create_vm_current_disk_size }}"
          - "Desired size: {{ _create_vm_desired_disk_size }}"

    - name: Resize disk image
      when:
        - _create_vm_current_disk_size != _create_vm_desired_disk_size
      block:
        - name: Resize disk to {{ item.disk.size_gb }} GB
          ansible.builtin.command: qemu-img resize "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2"  "{{ _create_vm_desired_disk_size }}"
        - name: Copy image to temporary image file
          ansible.builtin.copy:
            src: "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2"
            dest: "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2.temp"
            remote_src: yes
            force: no
        - name: Resize the destination image file
          ansible.builtin.command: virt-resize --expand {{ item.disk.root_fs }} "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2.temp" "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2"
        - name: Remove the temporary disk image
          ansible.builtin.file:
            path: "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2.temp"
            state: absent

- name: Customize VM
  ansible.builtin.command: >
    virt-customize
    -a {{ lab_host_image_path }}/{{ item.name }}-vda.qcow2
    --root-password password:redhat
    --uninstall cloud-init
    --hostname {{ item.name }}
    --ssh-inject root:string:"{{ lab.ssh_public_key }}"
    --selinux-relabel
  changed_when: true

- name: Install {{ item.name }} with virt-install and NAT networking
  ansible.builtin.command: >
    virt-install
    --connect "{{ _create_vm_qemu_uri }}"
    --name "{{ item.name }}"
    --memory "{{ item.memory | default('2048') }}"
    --vcpus "{{ item.cpu | default('1') }}"
    --disk "{{ lab_host_image_path }}/{{ item.name }}-vda.qcow2"
    --import
    --os-variant rhel8.1
    --noautoconsole
    --network "network={{ lab.network.name }},mac={{ item.macaddr }}"
  when:
    - lab.network.type == "nat"
  changed_when: true

- name: Install {{ item.name }} with virt-install and BRIDGE networking
  ansible.builtin.command: >
    virt-install
    --connect "{{ _create_vm_qemu_uri }}"
    --name {{ item.name }}
    --memory {{ item.memory | default('2048') }}
    --vcpus {{ item.cpu | default('1') }}
    --disk {{ lab_host_image_path }}/{{ item.name }}-vda.qcow2
    --import
    --os-variant rhel8.1
    --noautoconsole
    --network "bridge={{ _create_vm_bridge_name }},mac={{ item.macaddr }}"
  when:
    - lab.network.type == "bridge"

- name: Wait for host to be accessible
  wait_for:
    port: 22
    host: "{{ item.ipaddr }}"

- name: Add {{ item.name }} to in memory inventory
  add_host:
    hostname: "{{ item.name }}"
    ansible_host: "{{ item.ipaddr }}"
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
  when: lab_ssh_proxy == ""
